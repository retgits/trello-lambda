#!/usr/bin/env bash

FUNC=Trello

# Make sure all the dependencies are available
deps() { 
    echo Update all dependencies...
    go get -u ./...
}

# Remove the bin folder
clean() {
    echo Cleaning up older versions...
    rm -rf bin
}

# Create the executable
build() {
    echo Executing build...
    GOOS=linux GOARCH=amd64 go build -o bin/${FUNC,,} src/*.go
}

# Use SAM local to test the code
test() {
    sam local invoke "${FUNC}" -e event.json
}

# Get the variables from the AWS Systems Manager Parameter Store
getparams() {
    echo Get parameters from AWS Systems Manager Parameter Store...
    if [[ ! -f template.yaml.bak ]]; then
        cp template.yaml template.yaml.bak
        echo "created backup..."
    fi
    for row in $(yq r template.yaml Resources.${FUNC}.Properties.Environment.Variables); do 
        if [[ $row = *":"* ]]; then 
            param=${row::-1};
            sVar=$(aws ssm get-parameter --name /${FUNC,,}/${param} --with-decryption | jq '.Parameter.Value')
            $(yq w -i template.yaml Resources.${FUNC}.Properties.Environment.Variables.${param} ${sVar})
        fi; 
    done
    sed -i '' 's/ GetAtt / !GetAtt /g' template.yaml
}

# Replace the template with the backup
delparams() {
    echo Remove all parameter values from the template...
    mv template.yaml.bak template.yaml
}

# Get the latest committed version
getversion() {
    echo Get the commit version...
    sVar=$(git log -n 1 --pretty=format:"%H")
    [ ${#sVar} -ge 5 ] && sVar=$sVar || sVar=no-commits
    if [[ ! -f ./template.yaml.bak ]]; then
        cp template.yaml template.yaml.bak
    fi
    $(yq w -i template.yaml Resources.${FUNC}.Properties.Tags.commit ${sVar})
}

# Deploy the function to AWS Lambda
deploy() {
    # Make the necessary preparation
    clean
    build
    getversion
    getparams

    # Create a new S3 bucket
    bucket=`aws s3 mb s3://retgits-${FUNC,,} 2>&1`
    if [[ $bucket = *"BucketAlreadyOwnedByYou"* ]]; then
        bucket="retgits-${FUNC,,}"
    elif [[ $bucket = *"BucketAlreadyExists"*   ]]; then
        bucket=`aws s3 mb s3://retgits-${FUNC,,}-temp`
        if [[ $bucket = *"BucketAlreadyExists"* ]]; then
            echo $bucket
            exit 1
        fi
        bucket="${bucket:13}"
    fi

    # Package it up!
    sam package --template-file template.yaml --output-template-file packaged.yaml --s3-bucket $bucket

    # Create CF templates and deploy
    sam deploy --debug --template-file packaged.yaml --stack-name ${FUNC,,} --capabilities CAPABILITY_IAM

    # Clean up...
    delparams
    rm packaged.yaml

    # Get the ARN of this function
    outputs=`aws cloudformation describe-stacks --stack-name ${FUNC,,} | jq '.Stacks[0].Outputs | .[] | (.ExportName + ";" + .OutputValue)'`
    IFS=$'\n'
    for row in $outputs; do
        IFS=';'
        read -ra ADDR <<< "$row"
        b=${ADDR[0]:1}
        if [[ $b == :* ]]; then
            aws ssm put-parameter --name ${b//:/'/'} --value ${ADDR[1]:0:-1} --type String --overwrite
        fi
    done    
}

case "$1" in
    "deps")
        deps
        ;;
    "clean")
        clean
        ;;
    "test")
        test
        ;;
    "build")
        build
        ;;
    "getversion")
        getversion
        ;;
    "getparams")
        getparams
        ;;
    "delparams")
        delparams
        ;;
    "deploy")
        deploy
        ;;
    *)
        echo "The target {$1} want to execute doesn't exist"
        echo 
        echo "Usage"
        echo "./build deps       : go get and update all the dependencies"
        echo "./build clean      : removes the ./bin folder"
        echo "./build test       : uses SAM local and the event in event.json to test "
        echo "                     the implementation"
        echo "./build build      : creates the executable"
        echo "./build getversion : get the latest committed version"
        echo "./build getparams  : updates the SAM template with the values from the AWS"
        echo "                     Systems Manager Parameter Store"
        echo "./build delparams  : removes the values of the environment variables in the "
        echo "                     SAM template"
        echo "./build deploy     : deploy the function to AWS Lambda"
        exit 2
        ;; 
esac